/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateDatabaseArgs } from "./CreateDatabaseArgs";
import { UpdateDatabaseArgs } from "./UpdateDatabaseArgs";
import { DeleteDatabaseArgs } from "./DeleteDatabaseArgs";
import { DatabaseFindManyArgs } from "./DatabaseFindManyArgs";
import { DatabaseFindUniqueArgs } from "./DatabaseFindUniqueArgs";
import { Database } from "./Database";
import { DatabaseService } from "../database.service";

@graphql.Resolver(() => Database)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class DatabaseResolverBase {
  constructor(
    protected readonly service: DatabaseService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Database",
    action: "read",
    possession: "any",
  })
  async _databasesMeta(
    @graphql.Args() args: DatabaseFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Database])
  @nestAccessControl.UseRoles({
    resource: "Database",
    action: "read",
    possession: "any",
  })
  async databases(
    @graphql.Args() args: DatabaseFindManyArgs
  ): Promise<Database[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Database, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Database",
    action: "read",
    possession: "own",
  })
  async database(
    @graphql.Args() args: DatabaseFindUniqueArgs
  ): Promise<Database | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Database)
  @nestAccessControl.UseRoles({
    resource: "Database",
    action: "create",
    possession: "any",
  })
  async createDatabase(
    @graphql.Args() args: CreateDatabaseArgs
  ): Promise<Database> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Database)
  @nestAccessControl.UseRoles({
    resource: "Database",
    action: "update",
    possession: "any",
  })
  async updateDatabase(
    @graphql.Args() args: UpdateDatabaseArgs
  ): Promise<Database | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Database)
  @nestAccessControl.UseRoles({
    resource: "Database",
    action: "delete",
    possession: "any",
  })
  async deleteDatabase(
    @graphql.Args() args: DeleteDatabaseArgs
  ): Promise<Database | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
