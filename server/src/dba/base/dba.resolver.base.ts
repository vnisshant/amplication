/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateDbaArgs } from "./CreateDbaArgs";
import { UpdateDbaArgs } from "./UpdateDbaArgs";
import { DeleteDbaArgs } from "./DeleteDbaArgs";
import { DbaFindManyArgs } from "./DbaFindManyArgs";
import { DbaFindUniqueArgs } from "./DbaFindUniqueArgs";
import { Dba } from "./Dba";
import { DbaService } from "../dba.service";

@graphql.Resolver(() => Dba)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class DbaResolverBase {
  constructor(
    protected readonly service: DbaService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Dba",
    action: "read",
    possession: "any",
  })
  async _dbasMeta(
    @graphql.Args() args: DbaFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Dba])
  @nestAccessControl.UseRoles({
    resource: "Dba",
    action: "read",
    possession: "any",
  })
  async dbas(@graphql.Args() args: DbaFindManyArgs): Promise<Dba[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Dba, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Dba",
    action: "read",
    possession: "own",
  })
  async dba(@graphql.Args() args: DbaFindUniqueArgs): Promise<Dba | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Dba)
  @nestAccessControl.UseRoles({
    resource: "Dba",
    action: "create",
    possession: "any",
  })
  async createDba(@graphql.Args() args: CreateDbaArgs): Promise<Dba> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Dba)
  @nestAccessControl.UseRoles({
    resource: "Dba",
    action: "update",
    possession: "any",
  })
  async updateDba(@graphql.Args() args: UpdateDbaArgs): Promise<Dba | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Dba)
  @nestAccessControl.UseRoles({
    resource: "Dba",
    action: "delete",
    possession: "any",
  })
  async deleteDba(@graphql.Args() args: DeleteDbaArgs): Promise<Dba | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
