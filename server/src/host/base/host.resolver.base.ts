/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateHostArgs } from "./CreateHostArgs";
import { UpdateHostArgs } from "./UpdateHostArgs";
import { DeleteHostArgs } from "./DeleteHostArgs";
import { HostFindManyArgs } from "./HostFindManyArgs";
import { HostFindUniqueArgs } from "./HostFindUniqueArgs";
import { Host } from "./Host";
import { HostService } from "../host.service";

@graphql.Resolver(() => Host)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class HostResolverBase {
  constructor(
    protected readonly service: HostService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Host",
    action: "read",
    possession: "any",
  })
  async _hostsMeta(
    @graphql.Args() args: HostFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Host])
  @nestAccessControl.UseRoles({
    resource: "Host",
    action: "read",
    possession: "any",
  })
  async hosts(@graphql.Args() args: HostFindManyArgs): Promise<Host[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Host, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Host",
    action: "read",
    possession: "own",
  })
  async host(@graphql.Args() args: HostFindUniqueArgs): Promise<Host | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Host)
  @nestAccessControl.UseRoles({
    resource: "Host",
    action: "create",
    possession: "any",
  })
  async createHost(@graphql.Args() args: CreateHostArgs): Promise<Host> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Host)
  @nestAccessControl.UseRoles({
    resource: "Host",
    action: "update",
    possession: "any",
  })
  async updateHost(@graphql.Args() args: UpdateHostArgs): Promise<Host | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Host)
  @nestAccessControl.UseRoles({
    resource: "Host",
    action: "delete",
    possession: "any",
  })
  async deleteHost(@graphql.Args() args: DeleteHostArgs): Promise<Host | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
