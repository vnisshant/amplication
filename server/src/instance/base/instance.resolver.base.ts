/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateInstanceArgs } from "./CreateInstanceArgs";
import { UpdateInstanceArgs } from "./UpdateInstanceArgs";
import { DeleteInstanceArgs } from "./DeleteInstanceArgs";
import { InstanceFindManyArgs } from "./InstanceFindManyArgs";
import { InstanceFindUniqueArgs } from "./InstanceFindUniqueArgs";
import { Instance } from "./Instance";
import { InstanceService } from "../instance.service";

@graphql.Resolver(() => Instance)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class InstanceResolverBase {
  constructor(
    protected readonly service: InstanceService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Instance",
    action: "read",
    possession: "any",
  })
  async _instancesMeta(
    @graphql.Args() args: InstanceFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Instance])
  @nestAccessControl.UseRoles({
    resource: "Instance",
    action: "read",
    possession: "any",
  })
  async instances(
    @graphql.Args() args: InstanceFindManyArgs
  ): Promise<Instance[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Instance, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Instance",
    action: "read",
    possession: "own",
  })
  async instance(
    @graphql.Args() args: InstanceFindUniqueArgs
  ): Promise<Instance | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Instance)
  @nestAccessControl.UseRoles({
    resource: "Instance",
    action: "create",
    possession: "any",
  })
  async createInstance(
    @graphql.Args() args: CreateInstanceArgs
  ): Promise<Instance> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Instance)
  @nestAccessControl.UseRoles({
    resource: "Instance",
    action: "update",
    possession: "any",
  })
  async updateInstance(
    @graphql.Args() args: UpdateInstanceArgs
  ): Promise<Instance | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Instance)
  @nestAccessControl.UseRoles({
    resource: "Instance",
    action: "delete",
    possession: "any",
  })
  async deleteInstance(
    @graphql.Args() args: DeleteInstanceArgs
  ): Promise<Instance | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
