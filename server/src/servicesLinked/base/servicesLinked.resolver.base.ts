/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateServicesLinkedArgs } from "./CreateServicesLinkedArgs";
import { UpdateServicesLinkedArgs } from "./UpdateServicesLinkedArgs";
import { DeleteServicesLinkedArgs } from "./DeleteServicesLinkedArgs";
import { ServicesLinkedFindManyArgs } from "./ServicesLinkedFindManyArgs";
import { ServicesLinkedFindUniqueArgs } from "./ServicesLinkedFindUniqueArgs";
import { ServicesLinked } from "./ServicesLinked";
import { ServicesLinkedService } from "../servicesLinked.service";

@graphql.Resolver(() => ServicesLinked)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class ServicesLinkedResolverBase {
  constructor(
    protected readonly service: ServicesLinkedService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ServicesLinked",
    action: "read",
    possession: "any",
  })
  async _servicesLinkedsMeta(
    @graphql.Args() args: ServicesLinkedFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ServicesLinked])
  @nestAccessControl.UseRoles({
    resource: "ServicesLinked",
    action: "read",
    possession: "any",
  })
  async servicesLinkeds(
    @graphql.Args() args: ServicesLinkedFindManyArgs
  ): Promise<ServicesLinked[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ServicesLinked, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ServicesLinked",
    action: "read",
    possession: "own",
  })
  async servicesLinked(
    @graphql.Args() args: ServicesLinkedFindUniqueArgs
  ): Promise<ServicesLinked | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ServicesLinked)
  @nestAccessControl.UseRoles({
    resource: "ServicesLinked",
    action: "create",
    possession: "any",
  })
  async createServicesLinked(
    @graphql.Args() args: CreateServicesLinkedArgs
  ): Promise<ServicesLinked> {
    return await this.service.create({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ServicesLinked)
  @nestAccessControl.UseRoles({
    resource: "ServicesLinked",
    action: "update",
    possession: "any",
  })
  async updateServicesLinked(
    @graphql.Args() args: UpdateServicesLinkedArgs
  ): Promise<ServicesLinked | null> {
    try {
      return await this.service.update({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ServicesLinked)
  @nestAccessControl.UseRoles({
    resource: "ServicesLinked",
    action: "delete",
    possession: "any",
  })
  async deleteServicesLinked(
    @graphql.Args() args: DeleteServicesLinkedArgs
  ): Promise<ServicesLinked | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
